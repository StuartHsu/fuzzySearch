@{
    var wordList = ViewData["List"] as IEnumerable<string>;
}

<div class="text-center">
    <h1 class="display-4" style="margin-bottom: 30px;">Fuzzy Search</h1>
    <input id="inputBox" type="text" style="margin-bottom: 10px;">
    <div id="displayResult"></div>
</div>

<script>
    var wordList = @Html.Raw(Json.Serialize(ViewData["List"]));
    var inputBox = document.getElementById('inputBox');
    inputBox.onkeyup = updateNameDisplay;

    function updateNameDisplay() {
        var input = document.getElementById('inputBox').innerHTML = this.value || "??";
        var searchResult = Search(input.toLowerCase(), wordList, 0.70);
        let uniqueSearchResult = [...new Map(searchResult.map((item) => [item["word"], item])).values(),
        ];

        var data = "<h5>Result: </h5>";
        uniqueSearchResult
            .sort((a, b) => (a.score < b.score) ? 1 : ((b.score < a.score) ? -1 : 0))
            .forEach(x => {
                data += "<p style='margin-bottom: 2px;'>" + x.word + ", score: " + x.score + "</p>";
            });

        document.getElementById('displayResult').innerHTML = data;
    }

    function LevenshteinDistance(src, target) {
        var d = Array(src.length + 1).fill(null).map(() => Array(target.length + 1).fill(null));

        for (let i = 0; i <= src.length; i++) {
            d[i][0] = i;
        }
        for (let j = 0; j <= target.length; j++) {
            d[0][j] = j;
        }

        for (let i = 1; i <= src.length; i++) {
            for (let j = 1; j <= target.length; j++) {
                var cost = src[i - 1] === target[j - 1] ? 0 : 1;
                var deletion = d[i - 1][j];
                var insertion = d[i][j - 1];
                var substitution = d[i - 1][j - 1];

                d[i][j] = Math.min(deletion + 1, insertion + 1, substitution + cost);

                // console.log({ src: src[i - 1], target: target[j - 1], cost, deletion, insertion, substitution, d: d[i][j] })
            }
        }
        // console.log(d);
        return d[src.length][target.length];
    }

    function Search(src, wordList, fuzzyness) {
        var foundWords = [];

        wordList.forEach(word => {
            // 取得 Levenshtein Distance
            var levenshteinDistance = LevenshteinDistance(src, word);

            // 取得較長字串的長度
            var length = Math.max(src.length, word.length);

            // 計算分數
            var score = (1.0 - (levenshteinDistance / length)).toFixed(2);
            // console.log({ levenshteinDistance, word, score });
            // Match?
            if (score >= fuzzyness) foundWords.push({ word, score });
        });
        return foundWords;
    }
</script>